import{_ as t,o as a,c as e,U as s}from"./chunks/framework.90171eb7.js";const b=JSON.parse('{"title":"离线验证模型","description":"","frontmatter":{},"headers":[],"relativePath":"zhCN/projbobcat/authenticators/offline.md","filePath":"zhCN/projbobcat/authenticators/offline.md"}'),n={name:"zhCN/projbobcat/authenticators/offline.md"},l=s(`<h1 id="离线验证模型" tabindex="-1">离线验证模型 <a class="header-anchor" href="#离线验证模型" aria-label="Permalink to &quot;离线验证模型&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#离线验证模型">离线验证模型</a><ul><li><a href="#初始化验证器">初始化验证器</a></li><li><a href="#获取验证结果">获取验证结果</a></li><li><a href="#解读验证结果">解读验证结果</a><ul><li><a href="#失败的验证结果">失败的验证结果</a></li><li><a href="#成功的验证结果">成功的验证结果</a></li></ul></li></ul></li></ul></nav><p>该验证模型实现了最基础的验证功能。通常用于本地调试和验证。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在生产环节使用该验证模型在部分国家和地区可能会<strong>违反版权法或是最终用户协议</strong>，详见 <a href="https://www.minecraft.net/en-us/eula" target="_blank" rel="noreferrer">Mojang 最终用户协议（英文）</a></p></div><h2 id="初始化验证器" tabindex="-1">初始化验证器 <a class="header-anchor" href="#初始化验证器" aria-label="Permalink to &quot;初始化验证器&quot;">​</a></h2><p>您可以通过下面的代码初始化离线验证器：</p><div class="language-c# line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">offlineAuthenticator</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OfflineAuthenticator</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    LauncherAccountParser </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> launcherAccountParser</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    Username </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[DISPLAY_NAME]</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上述代码块中，请将这些参数按照您的实际情况替换：</p><table><thead><tr><th style="text-align:center;">项目</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">launcherAccountParser</td><td style="text-align:center;">对于启动器账户解析器的初始化，详见<a href="./.html">此处</a></td></tr><tr><td style="text-align:center;">[DISPLAY_NAME]</td><td style="text-align:center;">游戏中的显示名称，通常是由英文字符、符号以及数字组成</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>对于 <strong>launcherAccountParser</strong>（游戏档案解析器）的初始化，请参考<a href="/zhCN/projbobcat/additionalParsers/gameProfileParser.html">游戏档案解析器</a>页面</p></div><h2 id="获取验证结果" tabindex="-1">获取验证结果 <a class="header-anchor" href="#获取验证结果" aria-label="Permalink to &quot;获取验证结果&quot;">​</a></h2><p>在您完成验证模型的初始化后，您只需要调用离线验证器的验证方法来完成账户验证。</p><p>在异步上下文中，使用 <strong>AuthTaskAsync</strong> 来完成验证：</p><div class="language-c# line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">authResult</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> offlineAuthenticator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AuthTaskAsync</span><span style="color:#89DDFF;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在同步上下文中，使用 <strong>Auth</strong> 来完成验证：</p><div class="language-c# line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">authResult</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> offlineAuthenticator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Auth</span><span style="color:#89DDFF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="解读验证结果" tabindex="-1">解读验证结果 <a class="header-anchor" href="#解读验证结果" aria-label="Permalink to &quot;解读验证结果&quot;">​</a></h2><p>在验证方法完成之后，验证模型会返回验证结果，这是一个类型为 <a href="https://github.com/Corona-Studio/ProjBobcat/blob/master/ProjBobcat/ProjBobcat/Class/Model/Auth/AuthResultBase.cs" target="_blank" rel="noreferrer">AuthResultBase</a> 的对象。 所有的验证结果都包含一个枚举值 <strong>AuthStatus</strong>，该枚举值直接指示了验证结果的成功或是失败。 在下面您可以看到对验证结果的解读：</p><h3 id="失败的验证结果" tabindex="-1">失败的验证结果 <a class="header-anchor" href="#失败的验证结果" aria-label="Permalink to &quot;失败的验证结果&quot;">​</a></h3><p>通过判断 <strong>Error</strong> 是否为空，您可以很轻松的判断验证模型返回的验证结果是否是有效的， <strong>Error</strong> 对象会包含以下字段来告诉您一些细节：</p><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">authResult.Error.Cause</td><td style="text-align:center;">导致问题的具体原因</td></tr><tr><td style="text-align:center;">authResult.Error.Error</td><td style="text-align:center;">错误名称</td></tr><tr><td style="text-align:center;">authResult.Error.ErrorMessage</td><td style="text-align:center;">错误的详细信息，可能包含解决方案</td></tr></tbody></table><h3 id="成功的验证结果" tabindex="-1">成功的验证结果 <a class="header-anchor" href="#成功的验证结果" aria-label="Permalink to &quot;成功的验证结果&quot;">​</a></h3><p>如果验证结果中的 <strong>Error</strong> 字段为空，则表示本次验证是有效的，成功的验证结果会包含下面的信息：</p><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">authResult.Id</td><td style="text-align:center;">该用户名的唯一标识符，ProjBobcat 使用特定的生成方式来生成这个标识符</td></tr><tr><td style="text-align:center;">authResult.AccessToken</td><td style="text-align:center;">用户账户的授权凭据，这对于离线验证模型是没有任何意义的</td></tr><tr><td style="text-align:center;">authResult.User.UUID</td><td style="text-align:center;">该用户的 UUID，与 <strong>authResult.Id</strong> 类似</td></tr><tr><td style="text-align:center;">authResult.User.Properties</td><td style="text-align:center;">用户的属性数组，对于离线验证模型来说，该数组只包含唯一一个有效值</td></tr></tbody></table>`,24),r=[l];function o(c,p,i,d,h,u){return a(),e("div",null,r)}const g=t(n,[["render",o]]);export{b as __pageData,g as default};
